[{"title":"python脚本使用ffmeg合并超多ts文件到.mp4","date":"2017-11-01T15:09:24.818Z","path":"2017/11/01/python/ffmpeg20171101/","text":"遇到的坑： 合并ts文件过多时提示”too many open files”错误 ffmpeg不支持mp4文件的合并 刚开始完python,感觉python操作起文件真爽，一些基本的函数我都感觉特别高大上啊[捂脸]： os.listdir()列出文件夹所有文件并等额分割 路径与文件名完美拼接 ffmpeg合并ts文件到mp4 ffmpeg合并多个mp4文件到一个mp4 贴代码1234567891011121314151617181920212223242526272829import osdirs = \"/data/vod/ts/\"mp4 = \"/data/vod/mp4/\"filename = \"asddaas.mp4\"a = 1content = \"\"lists = os.listdir(dirs)b = [lists[i:i+250] for i in range(0,len(lists),250)]for lis in b: cmd = \"cd %s &amp;&amp; ffmpeg -i \\\"concat:\"%mp4 for file in lis: if file != '.DS_Store': file_path = os.path.join(dirs, file) cmd += file_path + '|'; # print(\"文件：%s\"%file_path) cmd = cmd[:-1] cmd += '\" -bsf:a aac_adtstoasc -c copy -vcodec copy %s.mp4'%a try: os.system(cmd) content += \"file '%s.mp4'\\n\"%a a = a+1 except: print(\"Unexpected error\")fp = open(\"%smp4list.txt\"%mp4,'a+')fp.write(content)fp.close()mp4cmd = \"cd %s &amp;&amp; ffmpeg -y -f concat -i mp4list.txt -c copy %s\"%(mp4,filename)os.system(mp4cmd) 合并ts文件过多时总是提示”too many open files”错误系统支持最大打开文件数有限制。终端输入 &gt;ulimit -n 查看最大打开文件数量.我的电脑最大限制为256。自己设置 &gt;ulimit -n 256000 提示设置成功但运行ffmpeg合并命令仍然报错。最后只好将所有ts文件切片分到不同数组中。 lists = os.listdir(dirs)b = [lists[i:i+250] for i in range(0,len(lists),250)]将dirs下所有文件名放到lists中 并以250个元素一组分割，不够250视为一组。list = [1,2,3,4,5] a=[list[i:i+2] for i in range(0,len(list),2)]此时打印a将会看到 a=[[1,2],[3,4],[5,]] 合并ts文件到mp4文件：ffmpeg -i “concat:1.ts|2.ts|3.ts|4.ts|5.ts -bsf:a aac_adtstoasc -c copy -vcodec copy 1.mp4 ffmpeg不支持直接mp4文件的合并，查了一下好多是说先说mp4文件转ts文件在进行合并，太麻烦。找到一种将所有mp4文件名放到一个txt文件中再去合并txt文件，刚好符合预期。就喜欢这种简单暴力的方法：ffmpeg -y -f concat -i mp4list.txt -c copy asddaas.mp4mp4list.txt文件内容：file “1.mp4”file “2.mp4”file “3.mp4” 相关链接：python脚本使用ffmeg合并超多ts文件到mp4","raw":"---\nlayout: post\ntitle: \"python脚本使用ffmeg合并超多ts文件到.mp4\"\ndate: 2017-11-01 23：10\ncomments: true\ntags: \n\t- 码农\n---\n\n 遇到的坑：\n\n - 合并ts文件过多时提示\"too many open files\"错误\n - ffmpeg不支持mp4文件的合并\n\n刚开始完python,感觉python操作起文件真爽，一些基本的函数我都感觉特别高大上啊[捂脸]：\n\n- **os.listdir()列出文件夹所有文件并等额分割**\n- **路径与文件名完美拼接**\n- **ffmpeg合并ts文件到mp4**\n- **ffmpeg合并多个mp4文件到一个mp4**\n\n-------------------\n\n## 贴代码\n\n``` python\nimport os\ndirs = \"/data/vod/ts/\"\nmp4 = \"/data/vod/mp4/\"\nfilename = \"asddaas.mp4\"\na = 1\ncontent = \"\"\nlists = os.listdir(dirs)\nb = [lists[i:i+250] for i in range(0,len(lists),250)]\nfor lis in b:\n\tcmd = \"cd %s && ffmpeg -i \\\"concat:\"%mp4\n\tfor file in lis:\n\t\tif file != '.DS_Store':\n\t\t\tfile_path = os.path.join(dirs, file)\n\t\t\tcmd += file_path + '|';\n\t\t\t# print(\"文件：%s\"%file_path)\n\tcmd = cmd[:-1]\n\tcmd += '\" -bsf:a aac_adtstoasc -c copy -vcodec copy %s.mp4'%a\n\ttry:\n\t\tos.system(cmd)\n\t\tcontent += \"file '%s.mp4'\\n\"%a\n\t\ta = a+1\n\texcept:\n\t\tprint(\"Unexpected error\")\n\nfp = open(\"%smp4list.txt\"%mp4,'a+')\nfp.write(content)\nfp.close()\nmp4cmd = \"cd %s && ffmpeg -y -f concat -i mp4list.txt -c copy %s\"%(mp4,filename)\nos.system(mp4cmd)\n```\n\n- 合并ts文件过多时总是提示\"too many open files\"错误\n系统支持最大打开文件数有限制。终端输入 >ulimit -n  查看最大打开文件数量.我的电脑最大限制为256。自己设置 >ulimit -n 256000 提示设置成功但运行ffmpeg合并命令仍然报错。最后只好将所有ts文件切片分到不同数组中。\n\n- lists = os.listdir(dirs)\nb = [lists[i:i+250] for i in range(0,len(lists),250)]\n将dirs下所有文件名放到lists中 并以250个元素一组分割，不够250视为一组。list = [1,2,3,4,5]    a=[list[i:i+2] for i in range(0,len(list),2)]此时打印a将会看到 a=[[1,2],[3,4],[5,]]\n\n- 合并ts文件到mp4文件：ffmpeg -i \"concat:1.ts|2.ts|3.ts|4.ts|5.ts -bsf:a aac_adtstoasc -c copy -vcodec copy 1.mp4\n\n- ffmpeg不支持直接mp4文件的合并，查了一下好多是说先说mp4文件转ts文件在进行合并，太麻烦。找到一种将所有mp4文件名放到一个txt文件中再去合并txt文件，刚好符合预期。就喜欢这种简单暴力的方法：ffmpeg -y -f concat -i mp4list.txt -c copy asddaas.mp4\nmp4list.txt文件内容：\nfile \"1.mp4\"\nfile \"2.mp4\"\nfile \"3.mp4\"\n\n相关链接：[python脚本使用ffmeg合并超多ts文件到mp4][1]\n\n\n  [1]: http://blog.csdn.net/swain_yj/article/details/78412295","content":"<p> 遇到的坑：</p>\n<ul>\n<li>合并ts文件过多时提示”too many open files”错误</li>\n<li>ffmpeg不支持mp4文件的合并</li>\n</ul>\n<p>刚开始完python,感觉python操作起文件真爽，一些基本的函数我都感觉特别高大上啊[捂脸]：</p>\n<ul>\n<li><strong>os.listdir()列出文件夹所有文件并等额分割</strong></li>\n<li><strong>路径与文件名完美拼接</strong></li>\n<li><strong>ffmpeg合并ts文件到mp4</strong></li>\n<li><strong>ffmpeg合并多个mp4文件到一个mp4</strong></li>\n</ul>\n<hr>\n<h2 id=\"贴代码\"><a href=\"#贴代码\" class=\"headerlink\" title=\"贴代码\"></a>贴代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\">dirs = <span class=\"string\">\"/data/vod/ts/\"</span></div><div class=\"line\">mp4 = <span class=\"string\">\"/data/vod/mp4/\"</span></div><div class=\"line\">filename = <span class=\"string\">\"asddaas.mp4\"</span></div><div class=\"line\">a = <span class=\"number\">1</span></div><div class=\"line\">content = <span class=\"string\">\"\"</span></div><div class=\"line\">lists = os.listdir(dirs)</div><div class=\"line\">b = [lists[i:i+<span class=\"number\">250</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(lists),<span class=\"number\">250</span>)]</div><div class=\"line\"><span class=\"keyword\">for</span> lis <span class=\"keyword\">in</span> b:</div><div class=\"line\">\tcmd = <span class=\"string\">\"cd %s &amp;&amp; ffmpeg -i \\\"concat:\"</span>%mp4</div><div class=\"line\">\t<span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> lis:</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> file != <span class=\"string\">'.DS_Store'</span>:</div><div class=\"line\">\t\t\tfile_path = os.path.join(dirs, file)</div><div class=\"line\">\t\t\tcmd += file_path + <span class=\"string\">'|'</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\"># print(\"文件：%s\"%file_path)</span></div><div class=\"line\">\tcmd = cmd[:<span class=\"number\">-1</span>]</div><div class=\"line\">\tcmd += <span class=\"string\">'\" -bsf:a aac_adtstoasc -c copy -vcodec copy %s.mp4'</span>%a</div><div class=\"line\">\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\tos.system(cmd)</div><div class=\"line\">\t\tcontent += <span class=\"string\">\"file '%s.mp4'\\n\"</span>%a</div><div class=\"line\">\t\ta = a+<span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"keyword\">except</span>:</div><div class=\"line\">\t\tprint(<span class=\"string\">\"Unexpected error\"</span>)</div><div class=\"line\"></div><div class=\"line\">fp = open(<span class=\"string\">\"%smp4list.txt\"</span>%mp4,<span class=\"string\">'a+'</span>)</div><div class=\"line\">fp.write(content)</div><div class=\"line\">fp.close()</div><div class=\"line\">mp4cmd = <span class=\"string\">\"cd %s &amp;&amp; ffmpeg -y -f concat -i mp4list.txt -c copy %s\"</span>%(mp4,filename)</div><div class=\"line\">os.system(mp4cmd)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>合并ts文件过多时总是提示”too many open files”错误<br>系统支持最大打开文件数有限制。终端输入 &gt;ulimit -n  查看最大打开文件数量.我的电脑最大限制为256。自己设置 &gt;ulimit -n 256000 提示设置成功但运行ffmpeg合并命令仍然报错。最后只好将所有ts文件切片分到不同数组中。</p>\n</li>\n<li><p>lists = os.listdir(dirs)<br>b = [lists[i:i+250] for i in range(0,len(lists),250)]<br>将dirs下所有文件名放到lists中 并以250个元素一组分割，不够250视为一组。list = [1,2,3,4,5]    a=[list[i:i+2] for i in range(0,len(list),2)]此时打印a将会看到 a=[[1,2],[3,4],[5,]]</p>\n</li>\n<li><p>合并ts文件到mp4文件：ffmpeg -i “concat:1.ts|2.ts|3.ts|4.ts|5.ts -bsf:a aac_adtstoasc -c copy -vcodec copy 1.mp4</p>\n</li>\n<li><p>ffmpeg不支持直接mp4文件的合并，查了一下好多是说先说mp4文件转ts文件在进行合并，太麻烦。找到一种将所有mp4文件名放到一个txt文件中再去合并txt文件，刚好符合预期。就喜欢这种简单暴力的方法：ffmpeg -y -f concat -i mp4list.txt -c copy asddaas.mp4<br>mp4list.txt文件内容：<br>file “1.mp4”<br>file “2.mp4”<br>file “3.mp4”</p>\n</li>\n</ul>\n<p>相关链接：<a href=\"http://blog.csdn.net/swain_yj/article/details/78412295\" target=\"_blank\" rel=\"external\">python脚本使用ffmeg合并超多ts文件到mp4</a></p>\n","slug":"python/ffmpeg20171101","updated":"2017-11-01T15:13:04.528Z","comments":true,"excerpt":"","categories":[],"tags":[{"name":"码农","slug":"码农","permalink":"http://yinkp.com/tags/码农/"}]},{"title":"如果我没遇到你","date":"2017-09-25T13:52:59.865Z","path":"2017/09/25/emotion/daily20170925/","text":"对酒当歌，人生几何。 飘渺的豪言壮志掩盖内心的空虚。 下班，挤地铁，回家，摊在沙发。这样的日子日复一日的重复着。打开抖音看下别人的精彩生活不禁感叹生活真好，，无意翻到几场离别无意翻到几场军训，耳边飘着 “再也没有”的歌声。无意中想到你。2013年3月与你相识，2013年5月9号偷偷吻你。我们开始的太快以至于我想都不敢想上苍会把这么漂亮的你安排在我身边。那个时候我们每天在一起的地方就是图书馆，你说要考研，我陪在你身边捣乱。过了一段时间我觉得校园太无聊就和已哥们一起搞了个烧烤摊，丢你一个人在学校。晚上你学累了就去我们的烧烤摊，时常还带着你做的丝瓜鸡蛋汤，那个时候我在朋友面前是多么的有面子。大三下半年我们在学校外面租了房子，但因为我在卖烤鱿鱼，经常会十二点之后才回去。房东十一点就锁了门，你总是在十二点的时候一个人摸着漆黑的楼道下来给我开门，那个时候你说我不回来一个人睡不着。大四，我们的烧烤摊不拍而散，你再也不用等我等到十二点了。我们一起去了小南海，我们一起去了青岛。你捡了一块石头自己砖了孔说要我一直带着，我当时只是惊讶你的耐力，于是如获珍宝般带在身上。你说小南海的凉菜是你吃过最好吃的。你说还想和我一起去小南海。学校的生活总是无聊的，没过多久，我找了一份工作，工资不高但够我们买水果交房租的了。有一次我看着月光看着熟睡的你很幸福。2015年阴历三月初六，我去师范学院调一个网站，一去就待到了晚上八点。你打了我电话我只是一直敷衍马上回去。我到三里屯的时候你一个人在路口站着提着给我准备的蛋糕。你说已经在这里站三个小时了。。。你脾气很臭，性子很倔。生气的时候就像火山要爆发一样，谁都不理。吵吵闹闹，分分合合不知道经历了多少次。2015年春节我去了你家，阿姨很喜欢我，我也很开心。2015年6月，我们毕业了，我来了北京，你在家准备入伍的事情。你说你手上有疤一定不会被录取的，你只是想试试，因为…..8月我陪你去了武装部，路上我们都没有说话，我不受控制的躺在了你的肩膀。你做了体检。我们一起回家。回来的路上我们一路没说话，下了车你就开始发火了，，你不知道你为什么发火，我也不知道。只是努力让你开心一点。你说你不喜欢我。9月，你入伍了，贵阳武警。我回去送你，看你穿上军装，看你剪了长发。你说等我回来，我说我会等你。你到了贵阳就哭了，你说想家，那边好陌生。之后我们就一直写信，朋友嘲笑又羡慕我说都什么年代了还写信。每月我都会收到你写的信，我也会给你回信，但是慢慢我就不知道要写什么了也就写的少了。每月你们会让打电话，开始很期待你的电话，没到你能打电话的时候我都会整天注意这手机，有任何事情都会把接你的电话放在第一位。等到你们发手机的时候我好像我习惯了一个人的生活，你们需要站哨，晚上两点才回下哨。你下哨的时候总会给我发信息，给我讲诉你一天的心情然后暧昧几句我就熬不住睁不开眼了。你去部队半年，我去看你，那是我第一次坐飞机，也是我第一次这么思念一个人。到了贵阳，到了你们武装部，你说只能在门口和我见面30分钟。看到我第一眼你就哭了，趴在我肩膀上哭的像个孩子，那也是我第一次看你这么脆弱。北京到贵阳，和你在一起了30分钟，但我很满足。你去部队一年，我们通电话我说我工作上的事情，你说不想听我在社会上的琐事。你给我讲你在部队的训练，我强装喜欢听的样子心不在焉的听着。你说人要无畏勇于担责，你满嘴的大道理，而我满脑子的社会上的无所谓。你入伍一年半，我提出了分手，你说还有半年你就回来了，我说我们都变了。你说不会挽留我，但我看到了你卑微的模样。07年6月，你对我说你提干了。我那时的心情和现在的心情一样想哭却哭不出来。我说祝福你，但愿你有更好的未来。你说让我找个女朋友。两瓶啤酒已经下肚，空虚已被罂粟填满。我明白我们再也回不去了，因为我的懦弱，因为我的胆怯，因为我不想在等。我多希望能完完全全忘记你，如果没有遇到你该多好，这样我就不会让你难过失望。","raw":"---\nlayout: post\ntitle: \"如果我没遇到你\"\ndate: 2017-09-25 21：54\ncomments: true\ntags: \n\t- 心情\n---\n\n对酒当歌，人生几何。 飘渺的豪言壮志掩盖内心的空虚。\n\n![](/assets/blogImg/nvbing.jpg)\n\n下班，挤地铁，回家，摊在沙发。这样的日子日复一日的重复着。打开抖音看下别人的精彩生活不禁感叹生活真好，，无意翻到几场离别无意翻到几场军训，耳边飘着 “再也没有”的歌声。无意中想到你。\n2013年3月与你相识，2013年5月9号偷偷吻你。我们开始的太快以至于我想都不敢想上苍会把这么漂亮的你安排在我身边。那个时候我们每天在一起的地方就是图书馆，你说要考研，我陪在你身边捣乱。过了一段时间我觉得校园太无聊就和已哥们一起搞了个烧烤摊，丢你一个人在学校。晚上你学累了就去我们的烧烤摊，时常还带着你做的丝瓜鸡蛋汤，那个时候我在朋友面前是多么的有面子。大三下半年我们在学校外面租了房子，但因为我在卖烤鱿鱼，经常会十二点之后才回去。房东十一点就锁了门，你总是在十二点的时候一个人摸着漆黑的楼道下来给我开门，那个时候你说我不回来一个人睡不着。\n大四，我们的烧烤摊不拍而散，你再也不用等我等到十二点了。我们一起去了小南海，我们一起去了青岛。你捡了一块石头自己砖了孔说要我一直带着，我当时只是惊讶你的耐力，于是如获珍宝般带在身上。你说小南海的凉菜是你吃过最好吃的。你说还想和我一起去小南海。\n学校的生活总是无聊的，没过多久，我找了一份工作，工资不高但够我们买水果交房租的了。有一次我看着月光看着熟睡的你很幸福。\n2015年阴历三月初六，我去师范学院调一个网站，一去就待到了晚上八点。你打了我电话我只是一直敷衍马上回去。我到三里屯的时候你一个人在路口站着提着给我准备的蛋糕。你说已经在这里站三个小时了。。。\n你脾气很臭，性子很倔。生气的时候就像火山要爆发一样，谁都不理。吵吵闹闹，分分合合不知道经历了多少次。2015年春节我去了你家，阿姨很喜欢我，我也很开心。\n2015年6月，我们毕业了，我来了北京，你在家准备入伍的事情。你说你手上有疤一定不会被录取的，你只是想试试，因为.....8月我陪你去了武装部，路上我们都没有说话，我不受控制的躺在了你的肩膀。你做了体检。我们一起回家。回来的路上我们一路没说话，下了车你就开始发火了，，你不知道你为什么发火，我也不知道。只是努力让你开心一点。你说你不喜欢我。9月，你入伍了，贵阳武警。我回去送你，看你穿上军装，看你剪了长发。你说等我回来，我说我会等你。\n你到了贵阳就哭了，你说想家，那边好陌生。之后我们就一直写信，朋友嘲笑又羡慕我说都什么年代了还写信。每月我都会收到你写的信，我也会给你回信，但是慢慢我就不知道要写什么了也就写的少了。每月你们会让打电话，开始很期待你的电话，没到你能打电话的时候我都会整天注意这手机，有任何事情都会把接你的电话放在第一位。等到你们发手机的时候我好像我习惯了一个人的生活，你们需要站哨，晚上两点才回下哨。你下哨的时候总会给我发信息，给我讲诉你一天的心情然后暧昧几句我就熬不住睁不开眼了。你去部队半年，我去看你，那是我第一次坐飞机，也是我第一次这么思念一个人。到了贵阳，到了你们武装部，你说只能在门口和我见面30分钟。看到我第一眼你就哭了，趴在我肩膀上哭的像个孩子，那也是我第一次看你这么脆弱。北京到贵阳，和你在一起了30分钟，但我很满足。你去部队一年，我们通电话我说我工作上的事情，你说不想听我在社会上的琐事。你给我讲你在部队的训练，我强装喜欢听的样子心不在焉的听着。你说人要无畏勇于担责，你满嘴的大道理，而我满脑子的社会上的无所谓。你入伍一年半，我提出了分手，你说还有半年你就回来了，我说我们都变了。你说不会挽留我，但我看到了你卑微的模样。07年6月，你对我说你提干了。我那时的心情和现在的心情一样想哭却哭不出来。我说祝福你，但愿你有更好的未来。你说让我找个女朋友。\n两瓶啤酒已经下肚，空虚已被罂粟填满。我明白我们再也回不去了，因为我的懦弱，因为我的胆怯，因为我不想在等。我多希望能完完全全忘记你，如果没有遇到你该多好，这样我就不会让你难过失望。\n\n\n  [1]: http://music.163.com/#/m/playlist?id=422891281&userid=304706205","content":"<p>对酒当歌，人生几何。 飘渺的豪言壮志掩盖内心的空虚。</p>\n<p><img src=\"/assets/blogImg/nvbing.jpg\" alt=\"\"></p>\n<p>下班，挤地铁，回家，摊在沙发。这样的日子日复一日的重复着。打开抖音看下别人的精彩生活不禁感叹生活真好，，无意翻到几场离别无意翻到几场军训，耳边飘着 “再也没有”的歌声。无意中想到你。<br>2013年3月与你相识，2013年5月9号偷偷吻你。我们开始的太快以至于我想都不敢想上苍会把这么漂亮的你安排在我身边。那个时候我们每天在一起的地方就是图书馆，你说要考研，我陪在你身边捣乱。过了一段时间我觉得校园太无聊就和已哥们一起搞了个烧烤摊，丢你一个人在学校。晚上你学累了就去我们的烧烤摊，时常还带着你做的丝瓜鸡蛋汤，那个时候我在朋友面前是多么的有面子。大三下半年我们在学校外面租了房子，但因为我在卖烤鱿鱼，经常会十二点之后才回去。房东十一点就锁了门，你总是在十二点的时候一个人摸着漆黑的楼道下来给我开门，那个时候你说我不回来一个人睡不着。<br>大四，我们的烧烤摊不拍而散，你再也不用等我等到十二点了。我们一起去了小南海，我们一起去了青岛。你捡了一块石头自己砖了孔说要我一直带着，我当时只是惊讶你的耐力，于是如获珍宝般带在身上。你说小南海的凉菜是你吃过最好吃的。你说还想和我一起去小南海。<br>学校的生活总是无聊的，没过多久，我找了一份工作，工资不高但够我们买水果交房租的了。有一次我看着月光看着熟睡的你很幸福。<br>2015年阴历三月初六，我去师范学院调一个网站，一去就待到了晚上八点。你打了我电话我只是一直敷衍马上回去。我到三里屯的时候你一个人在路口站着提着给我准备的蛋糕。你说已经在这里站三个小时了。。。<br>你脾气很臭，性子很倔。生气的时候就像火山要爆发一样，谁都不理。吵吵闹闹，分分合合不知道经历了多少次。2015年春节我去了你家，阿姨很喜欢我，我也很开心。<br>2015年6月，我们毕业了，我来了北京，你在家准备入伍的事情。你说你手上有疤一定不会被录取的，你只是想试试，因为…..8月我陪你去了武装部，路上我们都没有说话，我不受控制的躺在了你的肩膀。你做了体检。我们一起回家。回来的路上我们一路没说话，下了车你就开始发火了，，你不知道你为什么发火，我也不知道。只是努力让你开心一点。你说你不喜欢我。9月，你入伍了，贵阳武警。我回去送你，看你穿上军装，看你剪了长发。你说等我回来，我说我会等你。<br>你到了贵阳就哭了，你说想家，那边好陌生。之后我们就一直写信，朋友嘲笑又羡慕我说都什么年代了还写信。每月我都会收到你写的信，我也会给你回信，但是慢慢我就不知道要写什么了也就写的少了。每月你们会让打电话，开始很期待你的电话，没到你能打电话的时候我都会整天注意这手机，有任何事情都会把接你的电话放在第一位。等到你们发手机的时候我好像我习惯了一个人的生活，你们需要站哨，晚上两点才回下哨。你下哨的时候总会给我发信息，给我讲诉你一天的心情然后暧昧几句我就熬不住睁不开眼了。你去部队半年，我去看你，那是我第一次坐飞机，也是我第一次这么思念一个人。到了贵阳，到了你们武装部，你说只能在门口和我见面30分钟。看到我第一眼你就哭了，趴在我肩膀上哭的像个孩子，那也是我第一次看你这么脆弱。北京到贵阳，和你在一起了30分钟，但我很满足。你去部队一年，我们通电话我说我工作上的事情，你说不想听我在社会上的琐事。你给我讲你在部队的训练，我强装喜欢听的样子心不在焉的听着。你说人要无畏勇于担责，你满嘴的大道理，而我满脑子的社会上的无所谓。你入伍一年半，我提出了分手，你说还有半年你就回来了，我说我们都变了。你说不会挽留我，但我看到了你卑微的模样。07年6月，你对我说你提干了。我那时的心情和现在的心情一样想哭却哭不出来。我说祝福你，但愿你有更好的未来。你说让我找个女朋友。<br>两瓶啤酒已经下肚，空虚已被罂粟填满。我明白我们再也回不去了，因为我的懦弱，因为我的胆怯，因为我不想在等。我多希望能完完全全忘记你，如果没有遇到你该多好，这样我就不会让你难过失望。</p>\n","slug":"emotion/daily20170925","updated":"2017-09-25T15:19:55.837Z","comments":true,"excerpt":"","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://yinkp.com/tags/心情/"}]},{"title":"mac系统习下laravel的安装","date":"2017-06-21T14:23:08.071Z","path":"2017/06/21/php/laravelinstall/","text":"安装composer：brew composer 更新composer：composer update（可忽略，我安装composer之后~/.composer文件夹下是空的。在这个坑里转了好久。） 安装laravel:composer global require “laravel/installer” 添加环境变量：export PATH=$PATH:~/.composer/vendor/bin（执行resource，重新打开窗口立即生效） 在项目文件夹生成laravel项目：laravel new projectname。（你可能需要先修改项目文件夹权限：sudo chmod -R 777 yourdir） 进入laravel项目文件夹，启动php服务：php -S localhost:8001 -t public/ 访问localhost：8001即可查看项目。","raw":"---\nlayout: post\ntitle: \"mac系统习下laravel的安装\"\ndate: 2017-06-05 16：33\ncomments: true\ntags: \n\t- php\n---\n\n 1. 安装composer：brew composer\n 2. 更新composer：composer update（可忽略，我安装composer之后~/.composer文件夹下是空的。在这个坑里转了好久。）\n 3. 安装laravel:composer global require \"laravel/installer\"\n 4. 添加环境变量：export PATH=$PATH:~/.composer/vendor/bin（执行resource，重新打开窗口立即生效）\n 5. 在项目文件夹生成laravel项目：laravel new projectname。（你可能需要先修改项目文件夹权限：sudo chmod -R 777 yourdir）\n 6. 进入laravel项目文件夹，启动php服务：php -S localhost:8001 -t public/ 访问localhost：8001即可查看项目。\n\n\n","content":"<ol>\n<li>安装composer：brew composer</li>\n<li>更新composer：composer update（可忽略，我安装composer之后~/.composer文件夹下是空的。在这个坑里转了好久。）</li>\n<li>安装laravel:composer global require “laravel/installer”</li>\n<li>添加环境变量：export PATH=$PATH:~/.composer/vendor/bin（执行resource，重新打开窗口立即生效）</li>\n<li>在项目文件夹生成laravel项目：laravel new projectname。（你可能需要先修改项目文件夹权限：sudo chmod -R 777 yourdir）</li>\n<li>进入laravel项目文件夹，启动php服务：php -S localhost:8001 -t public/ 访问localhost：8001即可查看项目。</li>\n</ol>\n","slug":"php/laravelinstall","updated":"2017-06-21T14:23:25.281Z","comments":true,"excerpt":"","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://yinkp.com/tags/php/"}]},{"title":"基于CI框架oauth2.0的搭建与说明","date":"2017-06-05T09:15:49.743Z","path":"2017/06/05/php/oauth2/","text":"下载oauth2-PHP-server源码，拷贝到ci框架Librearies文件夹下Git clone https://github.com/bshaffer/oauth2-server-php &amp;&amp; mv -f oauth2-server-php oauth2 进入oauth2目录，通过composer安装 oauth2-server-php ： composer install 导入Oauth2.0数据库 mysql下载地址：http://homeway.me/code/oauth2.sql 在oauth文件夹根目录创建server.php文件，供ci框架外部调用。代码如下：Server.php1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?php require_once 'src/OAuth2/Autoloader.php'; class Server&#123; function __construct()&#123; $Autoloader = new OAuth2\\Autoloader(); $Autoloader::register(); $this-&gt;storage = new OAuth2\\Storage\\Pdo(array('dsn' =&gt; 'mysql:dbname=oauth;host=127.0.0.1', 'username' =&gt; 'oauth', 'password' =&gt; '123456')); $this-&gt;server = new OAuth2\\Server($this-&gt;storage, array('allow_implicit' =&gt; true)); $this-&gt;request = OAuth2\\Request::createFromGlobals(); $this-&gt;response = new OAuth2\\Response(); &#125; public function token()&#123; $this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send(); &#125; public function yanzhengToken()&#123; if (!$this-&gt;server-&gt;verifyResourceRequest($this-&gt;request)) &#123; $this-&gt;server-&gt;getResponse()-&gt;send(); die; &#125; &#125; //Authorization Code服务 public function authorize($is_authorized,$user_id=1234)&#123; $this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\AuthorizationCode($this-&gt;storage)); $this-&gt;server-&gt;handleAuthorizeRequest($this-&gt;request, $this-&gt;response, $is_authorized,$user_id); if ($is_authorized) &#123; $code = substr($this-&gt;response-&gt;getHttpHeader('Location'), strpos($this-&gt;response-&gt;getHttpHeader('Location'), 'code=')+5, 40); header(\"Location: \".$this-&gt;response-&gt;getHttpHeader('Location')); &#125; $this-&gt;response-&gt;send(); &#125; //Password Credentials服务 public function password_credentials($pass)&#123; $users = array(\"user\" =&gt; array(\"password\" =&gt; \"$pass\")); $storage = new OAuth2\\Storage\\Memory(array('user_credentials' =&gt; $users));//user是认证的账户，在表oauth_users中 $this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\UserCredentials($storage)); $this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send(); &#125; //Client Credentials服务 public function client_credentials()&#123; $this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\ClientCredentials($this-&gt;storage, array(\"allow_credentials_in_request_body\" =&gt; true))); $this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send(); &#125; //refresh_token服务 public function refresh_token()&#123; $this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\RefreshToken($this-&gt;storage, array( \"always_issue_new_refresh_token\" =&gt; true, \"unset_refresh_token_after_use\" =&gt; true, \"refresh_token_lifetime\" =&gt; 2419200, ))); $this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send(); &#125; &#125; 现在就可以通过调用server.php文件来请求code,请求token，验证token了。具体应用还需改动。注：oauth2.0数据库连接在开发者所创建的server.php文件中。因此oauth2.0可做一个完整的项目独立开发。数据库共有7张表。应用注册信息：oauth_clients；权限控制信息：oauth_scopes；code发放信息：oauth_authorization_codes；验证码发放信息：oauth_access_tokens。 OAuth 2.0中提到的授权方式有四种：授权码（Authorization Code）、隐式授权（Implicit Grant）、用户口令（Resource Owner Password Credentials）、应用口令（Client Credentials）。根据不同的授权范围应用不同的授权方式。开发者申请应用id时，同时保存允许开发者请求的授权方式。","raw":"---\nlayout: post\ntitle: \"基于CI框架oauth2.0的搭建与说明\"\ndate: 2017-06-05 16：33\ncomments: true\ntags: \n\t- php\n---\n <!-- oauth2.0的web服务器端的搭建与说明 -->\n 1. 下载oauth2-PHP-server源码，拷贝到ci框架Librearies文件夹下\nGit clone https://github.com/bshaffer/oauth2-server-php && mv -f oauth2-server-php oauth2\n\n 2. 进入oauth2目录，通过composer安装 oauth2-server-php ： composer install\n 3. 导入Oauth2.0数据库 mysql下载地址：[http://homeway.me/code/oauth2.sql][1]\n 4. 在oauth文件夹根目录创建server.php文件，供ci框架外部调用。代码如下：\n    <code>Server.php</code>\n\t``` python\n\t<?php\n    require_once 'src/OAuth2/Autoloader.php';\n    \n    class Server{\n    \tfunction __construct(){\n    \t\t$Autoloader = new OAuth2\\Autoloader();\n    \t\t$Autoloader::register();\n    \t\t$this->storage = new OAuth2\\Storage\\Pdo(array('dsn' => 'mysql:dbname=oauth;host=127.0.0.1', 'username' => 'oauth', 'password' => '123456'));\n    \t\t$this->server = new OAuth2\\Server($this->storage, array('allow_implicit' => true));\n    \t\t$this->request = OAuth2\\Request::createFromGlobals();\n    \t\t$this->response = new OAuth2\\Response();\n    \t}\n    \t\n    \tpublic function token(){\n    \t\t$this->server->handleTokenRequest($this->request)->send();\n    \t}\n    \t\n    \tpublic function yanzhengToken(){\n    \t\tif (!$this->server->verifyResourceRequest($this->request)) {\n    \t\t\t$this->server->getResponse()->send();\n    \t\t\tdie;\n    \t\t}\n    \t}\n    \t\n    \t//Authorization Code服务\n    \tpublic function authorize($is_authorized,$user_id=1234){\n    \t\t$this->server->addGrantType(new OAuth2\\GrantType\\AuthorizationCode($this->storage));\n    \t\t$this->server->handleAuthorizeRequest($this->request, $this->response, $is_authorized,$user_id);\n    \t\tif ($is_authorized) {\n    \t\t\t$code = substr($this->response->getHttpHeader('Location'), strpos($this->response->getHttpHeader('Location'), 'code=')+5, 40);\n    \t\t\theader(\"Location: \".$this->response->getHttpHeader('Location'));\n    \t\t}\n    \t\t$this->response->send();\n    \t}\n    \t\n    \t//Password Credentials服务\n    \tpublic function password_credentials($pass){\n    \t\t$users = array(\"user\" => array(\"password\" => \"$pass\"));\n    \t\t$storage = new OAuth2\\Storage\\Memory(array('user_credentials' => $users));//user是认证的账户，在表oauth_users中\n    \t\t$this->server->addGrantType(new OAuth2\\GrantType\\UserCredentials($storage));\n    \t\t$this->server->handleTokenRequest($this->request)->send();\n    \t}\n    \t\n    \t//Client Credentials服务\n    \tpublic function client_credentials(){\n    \t\t$this->server->addGrantType(new OAuth2\\GrantType\\ClientCredentials($this->storage, array(\"allow_credentials_in_request_body\" => true)));\n    \t\t$this->server->handleTokenRequest($this->request)->send();\n    \t}\n    \t\n    \t//refresh_token服务\n    \tpublic function refresh_token(){\n    \t\t$this->server->addGrantType(new OAuth2\\GrantType\\RefreshToken($this->storage, array(\n    \t\t\t\t\"always_issue_new_refresh_token\" => true,\n    \t\t\t\t\"unset_refresh_token_after_use\" => true,\n    \t\t\t\t\"refresh_token_lifetime\" => 2419200,\n    \t\t)));\n    \t\t$this->server->handleTokenRequest($this->request)->send();\n    \t}\n    }\n\t```\n现在就可以通过调用server.php文件来请求code,请求token，验证token了。具体应用还需改动。\n注：oauth2.0数据库连接在开发者所创建的server.php文件中。因此oauth2.0可做一个完整的项目独立开发。\n数据库共有7张表。应用注册信息：oauth_clients；权限控制信息：oauth_scopes；code发放信息：oauth_authorization_codes；验证码发放信息：oauth_access_tokens。\n\nOAuth 2.0中提到的授权方式有四种：授权码（Authorization Code）、隐式授权（Implicit Grant）、用户口令（Resource Owner Password Credentials）、应用口令（Client Credentials）。根据不同的授权范围应用不同的授权方式。开发者申请应用id时，同时保存允许开发者请求的授权方式。\n\n  [1]: http://homeway.me/code/oauth2.sql","content":" <!-- oauth2.0的web服务器端的搭建与说明 -->\n<ol>\n<li><p>下载oauth2-PHP-server源码，拷贝到ci框架Librearies文件夹下<br>Git clone <a href=\"https://github.com/bshaffer/oauth2-server-php\" target=\"_blank\" rel=\"external\">https://github.com/bshaffer/oauth2-server-php</a> &amp;&amp; mv -f oauth2-server-php oauth2</p>\n</li>\n<li><p>进入oauth2目录，通过composer安装 oauth2-server-php ： composer install</p>\n</li>\n<li>导入Oauth2.0数据库 mysql下载地址：<a href=\"http://homeway.me/code/oauth2.sql\" target=\"_blank\" rel=\"external\">http://homeway.me/code/oauth2.sql</a></li>\n<li>在oauth文件夹根目录创建server.php文件，供ci框架外部调用。代码如下：<br><code>Server.php</code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">   require_once 'src/OAuth2/Autoloader.php';</div><div class=\"line\">   </div><div class=\"line\">   class Server&#123;</div><div class=\"line\">   \tfunction __construct()&#123;</div><div class=\"line\">   \t\t$Autoloader = new OAuth2\\Autoloader();</div><div class=\"line\">   \t\t$Autoloader::register();</div><div class=\"line\">   \t\t$this-&gt;storage = new OAuth2\\Storage\\Pdo(array('dsn' =&gt; 'mysql:dbname=oauth;host=127.0.0.1', 'username' =&gt; 'oauth', 'password' =&gt; '123456'));</div><div class=\"line\">   \t\t$this-&gt;server = new OAuth2\\Server($this-&gt;storage, array('allow_implicit' =&gt; true));</div><div class=\"line\">   \t\t$this-&gt;request = OAuth2\\Request::createFromGlobals();</div><div class=\"line\">   \t\t$this-&gt;response = new OAuth2\\Response();</div><div class=\"line\">   \t&#125;</div><div class=\"line\">   \t</div><div class=\"line\">   \tpublic function token()&#123;</div><div class=\"line\">   \t\t$this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send();</div><div class=\"line\">   \t&#125;</div><div class=\"line\">   \t</div><div class=\"line\">   \tpublic function yanzhengToken()&#123;</div><div class=\"line\">   \t\tif (!$this-&gt;server-&gt;verifyResourceRequest($this-&gt;request)) &#123;</div><div class=\"line\">   \t\t\t$this-&gt;server-&gt;getResponse()-&gt;send();</div><div class=\"line\">   \t\t\tdie;</div><div class=\"line\">   \t\t&#125;</div><div class=\"line\">   \t&#125;</div><div class=\"line\">   \t</div><div class=\"line\">   \t//Authorization Code服务</div><div class=\"line\">   \tpublic function authorize($is_authorized,$user_id=1234)&#123;</div><div class=\"line\">   \t\t$this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\AuthorizationCode($this-&gt;storage));</div><div class=\"line\">   \t\t$this-&gt;server-&gt;handleAuthorizeRequest($this-&gt;request, $this-&gt;response, $is_authorized,$user_id);</div><div class=\"line\">   \t\tif ($is_authorized) &#123;</div><div class=\"line\">   \t\t\t$code = substr($this-&gt;response-&gt;getHttpHeader('Location'), strpos($this-&gt;response-&gt;getHttpHeader('Location'), 'code=')+5, 40);</div><div class=\"line\">   \t\t\theader(\"Location: \".$this-&gt;response-&gt;getHttpHeader('Location'));</div><div class=\"line\">   \t\t&#125;</div><div class=\"line\">   \t\t$this-&gt;response-&gt;send();</div><div class=\"line\">   \t&#125;</div><div class=\"line\">   \t</div><div class=\"line\">   \t//Password Credentials服务</div><div class=\"line\">   \tpublic function password_credentials($pass)&#123;</div><div class=\"line\">   \t\t$users = array(\"user\" =&gt; array(\"password\" =&gt; \"$pass\"));</div><div class=\"line\">   \t\t$storage = new OAuth2\\Storage\\Memory(array('user_credentials' =&gt; $users));//user是认证的账户，在表oauth_users中</div><div class=\"line\">   \t\t$this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\UserCredentials($storage));</div><div class=\"line\">   \t\t$this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send();</div><div class=\"line\">   \t&#125;</div><div class=\"line\">   \t</div><div class=\"line\">   \t//Client Credentials服务</div><div class=\"line\">   \tpublic function client_credentials()&#123;</div><div class=\"line\">   \t\t$this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\ClientCredentials($this-&gt;storage, array(\"allow_credentials_in_request_body\" =&gt; true)));</div><div class=\"line\">   \t\t$this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send();</div><div class=\"line\">   \t&#125;</div><div class=\"line\">   \t</div><div class=\"line\">   \t//refresh_token服务</div><div class=\"line\">   \tpublic function refresh_token()&#123;</div><div class=\"line\">   \t\t$this-&gt;server-&gt;addGrantType(new OAuth2\\GrantType\\RefreshToken($this-&gt;storage, array(</div><div class=\"line\">   \t\t\t\t\"always_issue_new_refresh_token\" =&gt; true,</div><div class=\"line\">   \t\t\t\t\"unset_refresh_token_after_use\" =&gt; true,</div><div class=\"line\">   \t\t\t\t\"refresh_token_lifetime\" =&gt; 2419200,</div><div class=\"line\">   \t\t)));</div><div class=\"line\">   \t\t$this-&gt;server-&gt;handleTokenRequest($this-&gt;request)-&gt;send();</div><div class=\"line\">   \t&#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>现在就可以通过调用server.php文件来请求code,请求token，验证token了。具体应用还需改动。<br>注：oauth2.0数据库连接在开发者所创建的server.php文件中。因此oauth2.0可做一个完整的项目独立开发。<br>数据库共有7张表。应用注册信息：oauth_clients；权限控制信息：oauth_scopes；code发放信息：oauth_authorization_codes；验证码发放信息：oauth_access_tokens。</p>\n<p>OAuth 2.0中提到的授权方式有四种：授权码（Authorization Code）、隐式授权（Implicit Grant）、用户口令（Resource Owner Password Credentials）、应用口令（Client Credentials）。根据不同的授权范围应用不同的授权方式。开发者申请应用id时，同时保存允许开发者请求的授权方式。</p>\n","slug":"php/oauth2","updated":"2017-06-05T09:42:53.535Z","comments":true,"excerpt":"","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://yinkp.com/tags/php/"}]},{"title":"apidoc 的安装与使用","date":"2017-05-16T04:14:40.979Z","path":"2017/05/16/js/apidoc20170516/","text":"什么是apidoc ? apidoc是基于node的web api文档的生成工具。 很早之前用过apidoc来写后台接口文档，过了一年左右居然全然忘记了怎样搭环境与怎样用。今天没事，就试着搭了一下，记录一下加深印象。为什么要使用apidoc？ apidoc可以提供统一的文档格式，避免了不同开发人员创造出多样的文档格式。 apidoc操作简单，注释风格的编码结构清晰，易于编写维护。 apidoc支持发送请求，返回结果一目了然。 apidoc的安装与使用： node的安装，自行下载node最新版本。 apidoc 的安装 打开终端输入 sudo npm install apidoc -g 完成安装。 终端输入 apidoc -h 查看是否安装成功。 使用apidoc创建文档 创建项目文件夹doc。在doc下创建src 和 output文件夹。分别用来存放编写的API文档和编译生成的API文档。 创建描述文件 在doc文件夹下新建apidoc.json文件，用来描述API文档的相关信息。样例如下： { “name”: “swain”, “version”: “1.0.0”, “description”: “我的接口文档”, “title”: “接口文档测试”, “url” : “http://localhost/test“ } name: 项目名称，version:版本号，description:项目描述，title:网页标题相当于标签，url:接口请求地址。 在src文件夹下创建test.js文件（也可以是java/php）.按照apidoc的编写规范： 在终端输入下面命令生成API文档。apidoc -i src/ -o output/ 若没有语法错误将在终端显示info:Done，表示我们已经创建好一个API文档。在浏览器打开output文件下的index.html文件查看文档。你可以将该文档上传至服务器，这样随时随地都可以查看该API文档了。 常用关键字： 相关链接：apidoc官方文档","raw":"---\nlayout: post\ntitle: \"apidoc 的安装与使用\"\ndate: 2017-05-16 11：22\ncomments: true\ntags: \n\t- js\n---\n\n**什么是apidoc ?** apidoc是基于node的web api文档的生成工具。\n    很早之前用过apidoc来写后台接口文档，过了一年左右居然全然忘记了怎样搭环境与怎样用。今天没事，就试着搭了一下，记录一下加深印象。\n**为什么要使用apidoc？**\n\n - apidoc可以提供统一的文档格式，避免了不同开发人员创造出多样的文档格式。\n - apidoc操作简单，注释风格的编码结构清晰，易于编写维护。\n - apidoc支持发送请求，返回结果一目了然。\n\n<h2>apidoc的安装与使用：</h2>\n\n - node的安装，自行下载node最新版本。\n - apidoc 的安装\n    打开终端输入 `sudo npm install apidoc -g` 完成安装。\n    终端输入 apidoc -h 查看是否安装成功。\n - 使用apidoc创建文档\n    创建项目文件夹doc。在doc下创建src 和 output文件夹。分别用来存放编写的API文档和编译生成的API文档。\n - 创建描述文件\n    在doc文件夹下新建apidoc.json文件，用来描述API文档的相关信息。样例如下：\n<code> {\n      \"name\": \"swain\",\n      \"version\": \"1.0.0\",\n      \"description\": \"我的接口文档\",\n      \"title\": \"接口文档测试\",\n      \"url\" : \"http://localhost/test\"\n    }</code>\n    name: 项目名称，version:版本号，description:项目描述，title:网页标题相当于<title>标签，url:接口请求地址。\n - 在src文件夹下创建test.js文件（也可以是java/php）.按照apidoc的编写规范：\n![](/assets/blogImg/apidoc1.png)\n - 在终端输入下面命令生成API文档。\n `apidoc -i src/ -o output/`\n    若没有语法错误将在终端显示`info:Done`，表示我们已经创建好一个API文档。在浏览器打开output文件下的`index.html`文件查看文档。你可以将该文档上传至服务器，这样随时随地都可以查看该API文档了。\n\n<h2>常用关键字：</h2>\n![](/assets/blogImg/apidoc2.png)\n\n相关链接：[apidoc官方文档][1]\n\n\n  [1]: http://apidocjs.com/","content":"<p><strong>什么是apidoc ?</strong> apidoc是基于node的web api文档的生成工具。<br>    很早之前用过apidoc来写后台接口文档，过了一年左右居然全然忘记了怎样搭环境与怎样用。今天没事，就试着搭了一下，记录一下加深印象。<br><strong>为什么要使用apidoc？</strong></p>\n<ul>\n<li>apidoc可以提供统一的文档格式，避免了不同开发人员创造出多样的文档格式。</li>\n<li>apidoc操作简单，注释风格的编码结构清晰，易于编写维护。</li>\n<li>apidoc支持发送请求，返回结果一目了然。</li>\n</ul>\n<h2>apidoc的安装与使用：</h2>\n\n<ul>\n<li>node的安装，自行下载node最新版本。</li>\n<li>apidoc 的安装<br> 打开终端输入 <code>sudo npm install apidoc -g</code> 完成安装。<br> 终端输入 apidoc -h 查看是否安装成功。</li>\n<li>使用apidoc创建文档<br> 创建项目文件夹doc。在doc下创建src 和 output文件夹。分别用来存放编写的API文档和编译生成的API文档。</li>\n<li>创建描述文件<br> 在doc文件夹下新建apidoc.json文件，用来描述API文档的相关信息。样例如下：<br><code> {<br>   “name”: “swain”,<br>   “version”: “1.0.0”,<br>   “description”: “我的接口文档”,<br>   “title”: “接口文档测试”,<br>   “url” : “<a href=\"http://localhost/test\" target=\"_blank\" rel=\"external\">http://localhost/test</a>“<br> }</code><br> name: 项目名称，version:版本号，description:项目描述，title:网页标题相当于<title>标签，url:接口请求地址。</title></li>\n<li>在src文件夹下创建test.js文件（也可以是java/php）.按照apidoc的编写规范：<br><img src=\"/assets/blogImg/apidoc1.png\" alt=\"\"></li>\n<li>在终端输入下面命令生成API文档。<br><code>apidoc -i src/ -o output/</code><br> 若没有语法错误将在终端显示<code>info:Done</code>，表示我们已经创建好一个API文档。在浏览器打开output文件下的<code>index.html</code>文件查看文档。你可以将该文档上传至服务器，这样随时随地都可以查看该API文档了。</li>\n</ul>\n<p></p><h2>常用关键字：</h2><br><img src=\"/assets/blogImg/apidoc2.png\" alt=\"\"><p></p>\n<p>相关链接：<a href=\"http://apidocjs.com/\" target=\"_blank\" rel=\"external\">apidoc官方文档</a></p>\n","slug":"js/apidoc20170516","updated":"2017-05-16T04:14:54.376Z","comments":true,"excerpt":"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yinkp.com/tags/js/"}]},{"title":"你好啊","date":"2017-05-11T07:56:00.392Z","path":"2017/05/11/hello-everyone/","text":"你好，很开心来到这里。功能还在完善中，敬请期待。。 但愿伊姐给我带来好运","raw":"---\ntitle: 你好啊\n---\n你好，很开心来到这里。\n功能还在完善中，敬请期待。。\n\n\n----------\n但愿伊姐给我带来好运\n![](/assets/blogImg/yiyi.jpg)","content":"<p>你好，很开心来到这里。<br>功能还在完善中，敬请期待。。</p>\n<hr>\n<p>但愿伊姐给我带来好运<br><img src=\"/assets/blogImg/yiyi.jpg\" alt=\"\"></p>\n","slug":"hello-everyone","updated":"2017-05-11T07:56:18.610Z","comments":true,"excerpt":"","categories":[],"tags":[]},{"title":"PHP下Twig的安装与使用","date":"2017-05-11T07:42:48.419Z","path":"2017/05/11/mould/twing20170511/","text":"下载Twig源码 https://github.com/twigphp/Twig/tags 复制lib文件夹下核心目录到CI框架的 common 目录 在CI框架创建扩展文件，路径： ./application/libraries/Twig.php 扩展代码： &lt;?php/** Created by PhpStorm. User: Swain Date: 2016/6/8*/require BASEPATH.”common/Twig/Autoloader.php”;class twig{public $twig; public $config; private $data = array(); /** 读取配置文件twig.php并初始化设置 */public function __construct($config){ $config_default = array( &apos;cache_dir&apos; =&gt; false, //开启缓存 &apos;debug&apos; =&gt; false, //开启调试模式（dump函数可用） &apos;auto_reload&apos; =&gt; true, &apos;extension&apos; =&gt; &apos;.tpl&apos;, //默认后缀名 ); $this-&gt;config = array_merge($config_default, $config); Twig_Autoloader::register (); $loader = new Twig_Loader_Filesystem ($this-&gt;config[‘template_dir’]); $this-&gt;twig = new Twig_Environment ($loader, array ( &apos;cache&apos; =&gt; $this-&gt;config[&apos;cache_dir&apos;], &apos;debug&apos; =&gt; $this-&gt;config[&apos;debug&apos;], &apos;auto_reload&apos; =&gt; $this-&gt;config[&apos;auto_reload&apos;], ) ); $CI = &amp; get_instance (); $CI-&gt;load-&gt;helper(array(‘url’)); $this-&gt;twig-&gt;addFunction(new Twig_SimpleFunction(‘site_url’, ‘site_url’)); $this-&gt;twig-&gt;addFunction(new Twig_SimpleFunction(‘base_url’, ‘base_url’));} /** 给变量赋值 @param string|array $var @param string $value*/public function assign($var, $value = NULL){ if(is_array($var)) { foreach($var as $key =&gt; $val) { $this-&gt;data[$key] = $val; } } else { $this-&gt;data[$var] = $value; }} /** 模版渲染 @param string $template 模板名 @param array $data 变量数组 @param string $return true返回 false直接输出页面 @return string*/public function render($template, $data = array(), $return = FALSE){ $template = $this-&gt;twig-&gt;loadTemplate ( $this-&gt;getTemplateName($template) ); $data = array_merge($this-&gt;data, $data); if ($return === TRUE) { return $template-&gt;render ( $data ); } else { return $template-&gt;display ( $data ); }} /** 获取模版名 @param string $template*/public function getTemplateName($template){ $default_ext_len = strlen($this-&gt;config[‘extension’]); if(substr($template, -$default_ext_len) != $this-&gt;config[‘extension’]) { $template .= $this-&gt;config[&apos;extension&apos;]; } return $template;} /** 字符串渲染 @param string $string 需要渲染的字符串 @param array $data 变量数组 @param string $return true返回 false直接输出页面 @return string*/public function parse($string, $data = array(), $return = FALSE){ $string = $this-&gt;twig-&gt;loadTemplate ( $string ); $data = array_merge($this-&gt;data, $data); if ($return === TRUE) { return $string-&gt;render ( $data ); } else { return $string-&gt;display ( $data ); }}} 在CI框架创建配制文件，路径： ./application/config/twig.php 配制代码： &lt;?php if ( ! defined(‘BASEPATH’)) exit(‘No direct script access allowed’);// 默认扩展名$config[‘extension’] = “.twig”;// 默认模版路径$config[‘template_dir’] = APPPATH . “views/“;// 缓存目录$config[‘cache_dir’] = APPPATH . “cache/twig/“;// 是否开启调试模式$config[‘debug’] = false;// 自动刷新$config[‘auto_reload’] = true; 设置自动加载 ./application/config/autoload.php 把扩展及配制自动加载$autoload[&#39;libraries&#39;] = array(&#39;Twig&#39;);$autoload[&#39;libraries&#39;] = array(&#39;Twig&#39;); ##Twig模板的使用$loader = new Twig_Loader_Filesystem(‘application/path’);//模板路径 $twig = new Twig_Environment($loader, array( ‘cache’ =&gt; ‘/path/compilation_cache’, //设置缓存，建议调试阶段关闭（缓存太//强大删不掉的那种） )); $template = $twig-&gt;loadTemplate(‘test.twig’); //载入模板名称 $template-&gt;display($data);//变量数据传入模板展示 开发文档：http://twig.sensiolabs.org/documentation 相关链接：Twig的安装与使用","raw":"---\nlayout: post\ntitle: \"PHP下Twig的安装与使用\"\ndate: 2016-06-16 08：12\ncomments: true\ntags: \n\t- 模板\n---\n\n 1. 下载Twig源码 https://github.com/twigphp/Twig/tags\n 2. 复制lib文件夹下核心目录到CI框架的 common 目录\n 3. 在CI框架创建扩展文件，路径： ./application/libraries/Twig.php 扩展代码：\n\n    <?php  \n    /** \n    * Created by PhpStorm. \n    * User: Swain \n    * Date: 2016/6/8  \n    */  \n   require BASEPATH.\"common/Twig/Autoloader.php\";  \n   class twig  \n   {  \n    public $twig;  \n      \n    public $config;  \n      \n    private $data = array();  \n      \n    /** \n     * 读取配置文件twig.php并初始化设置 \n     * \n     */  \n    public function __construct($config)  \n    {  \n        $config_default = array(  \n            'cache_dir' => false, //开启缓存  \n            'debug' => false, //开启调试模式（dump函数可用）  \n            'auto_reload' => true,  \n            'extension' => '.tpl', //默认后缀名  \n        );  \n        $this->config = array_merge($config_default, $config);  \n        Twig_Autoloader::register ();  \n        $loader = new Twig_Loader_Filesystem ($this->config['template_dir']);  \n        $this->twig = new Twig_Environment ($loader, array (  \n            'cache' => $this->config['cache_dir'],  \n            'debug' => $this->config['debug'],  \n            'auto_reload' => $this->config['auto_reload'],  \n        ) );  \n        $CI = & get_instance ();  \n        $CI->load->helper(array('url'));  \n        $this->twig->addFunction(new Twig_SimpleFunction('site_url', 'site_url'));  \n        $this->twig->addFunction(new Twig_SimpleFunction('base_url', 'base_url'));  \n    }  \n      \n    /** \n     * 给变量赋值 \n     * \n     * @param string|array $var \n     * @param string $value \n     */  \n    public function assign($var, $value = NULL)  \n    {  \n        if(is_array($var)) {  \n            foreach($var as $key => $val) {  \n                $this->data[$key] = $val;  \n            }  \n        } else {  \n            $this->data[$var] = $value;  \n        }  \n    }  \n      \n    /** \n     * 模版渲染 \n     * \n     * @param string $template 模板名 \n     * @param array $data 变量数组 \n     * @param string $return true返回 false直接输出页面 \n     * @return string \n     */  \n    public function render($template, $data = array(), $return = FALSE)  \n    {  \n        $template = $this->twig->loadTemplate ( $this->getTemplateName($template) );  \n        $data = array_merge($this->data, $data);  \n        if ($return === TRUE) {  \n            return $template->render ( $data );  \n        } else {  \n            return $template->display ( $data );  \n        }  \n    }  \n      \n    /** \n     * 获取模版名 \n     * \n     * @param string $template \n     */  \n    public function getTemplateName($template)  \n    {  \n        $default_ext_len = strlen($this->config['extension']);  \n        if(substr($template, -$default_ext_len) != $this->config['extension']) {  \n            $template .= $this->config['extension'];  \n        }  \n        return $template;  \n    }  \n      \n    /** \n    * 字符串渲染 \n    * \n    * @param string $string 需要渲染的字符串 \n    * @param array $data 变量数组 \n    * @param string $return true返回 false直接输出页面 \n    * @return string \n    */  \n   public function parse($string, $data = array(), $return = FALSE)  \n   {  \n       $string = $this->twig->loadTemplate ( $string );  \n       $data = array_merge($this->data, $data);  \n       if ($return === TRUE) {  \n           return $string->render ( $data );  \n       } else {  \n           return $string->display ( $data );  \n       }  \n   }  \n  }  \n\n 4. 在CI框架创建配制文件，路径： ./application/config/twig.php 配制代码：\n     <?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');  \n    // 默认扩展名  \n    $config['extension'] = \".twig\";  \n    // 默认模版路径  \n    $config['template_dir'] = APPPATH . \"views/\";  \n    // 缓存目录  \n    $config['cache_dir'] = APPPATH . \"cache/twig/\";  \n    // 是否开启调试模式  \n    $config['debug'] = false;  \n    // 自动刷新  \n    $config['auto_reload'] = true;\n    \n\n 5. 设置自动加载 ./application/config/autoload.php 把扩展及配制自动加载\n `$autoload['libraries'] = array('Twig');`\n `$autoload['libraries'] = array('Twig');`\n\n##Twig模板的使用\n---------\n$loader = new Twig_Loader_Filesystem('application/path');//模板路径\n\n$twig = new Twig_Environment($loader, array(\n\n'cache' => '/path/compilation_cache',  //设置缓存，建议调试阶段关闭（缓存太//强大删不掉的那种）\n\n));\n\n$template = $twig->loadTemplate('test.twig');  //载入模板名称\n\n$template->display($data);//变量数据传入模板展示\n\n开发文档：http://twig.sensiolabs.org/documentation\n\n相关链接：[Twig的安装与使用][1]\n\n\n  [1]: http://blog.csdn.net/swain_yj/article/details/51693906","content":"<ol>\n<li>下载Twig源码 <a href=\"https://github.com/twigphp/Twig/tags\" target=\"_blank\" rel=\"external\">https://github.com/twigphp/Twig/tags</a></li>\n<li>复制lib文件夹下核心目录到CI框架的 common 目录</li>\n<li><p>在CI框架创建扩展文件，路径： ./application/libraries/Twig.php 扩展代码：</p>\n<p>&lt;?php<br>/** </p>\n<ul>\n<li>Created by PhpStorm. </li>\n<li>User: Swain </li>\n<li>Date: 2016/6/8<br>*/<br>require BASEPATH.”common/Twig/Autoloader.php”;<br>class twig<br>{<br>public $twig;  </li>\n</ul>\n<p>public $config;  </p>\n<p>private $data = array();  </p>\n<p>/** </p>\n<ul>\n<li>读取配置文件twig.php并初始化设置 </li>\n<li>*/<br>public function __construct($config)<br>{<br> $config_default = array(  <pre><code>&apos;cache_dir&apos; =&gt; false, //开启缓存  \n&apos;debug&apos; =&gt; false, //开启调试模式（dump函数可用）  \n&apos;auto_reload&apos; =&gt; true,  \n&apos;extension&apos; =&gt; &apos;.tpl&apos;, //默认后缀名  \n</code></pre> );<br> $this-&gt;config = array_merge($config_default, $config);<br> Twig_Autoloader::register ();<br> $loader = new Twig_Loader_Filesystem ($this-&gt;config[‘template_dir’]);<br> $this-&gt;twig = new Twig_Environment ($loader, array (  <pre><code>&apos;cache&apos; =&gt; $this-&gt;config[&apos;cache_dir&apos;],  \n&apos;debug&apos; =&gt; $this-&gt;config[&apos;debug&apos;],  \n&apos;auto_reload&apos; =&gt; $this-&gt;config[&apos;auto_reload&apos;],  \n</code></pre> ) );<br> $CI = &amp; get_instance ();<br> $CI-&gt;load-&gt;helper(array(‘url’));<br> $this-&gt;twig-&gt;addFunction(new Twig_SimpleFunction(‘site_url’, ‘site_url’));<br> $this-&gt;twig-&gt;addFunction(new Twig_SimpleFunction(‘base_url’, ‘base_url’));<br>}  </li>\n</ul>\n<p>/** </p>\n<ul>\n<li>给变量赋值 </li>\n<li></li>\n<li>@param string|array $var </li>\n<li>@param string $value<br>*/<br>public function assign($var, $value = NULL)<br>{<br> if(is_array($var)) {  <pre><code>foreach($var as $key =&gt; $val) {  \n    $this-&gt;data[$key] = $val;  \n}  \n</code></pre> } else {  <pre><code>$this-&gt;data[$var] = $value;  \n</code></pre> }<br>}  </li>\n</ul>\n<p>/** </p>\n<ul>\n<li>模版渲染 </li>\n<li></li>\n<li>@param string $template 模板名 </li>\n<li>@param array $data 变量数组 </li>\n<li>@param string $return true返回 false直接输出页面 </li>\n<li>@return string<br>*/<br>public function render($template, $data = array(), $return = FALSE)<br>{<br> $template = $this-&gt;twig-&gt;loadTemplate ( $this-&gt;getTemplateName($template) );<br> $data = array_merge($this-&gt;data, $data);<br> if ($return === TRUE) {  <pre><code>return $template-&gt;render ( $data );  \n</code></pre> } else {  <pre><code>return $template-&gt;display ( $data );  \n</code></pre> }<br>}  </li>\n</ul>\n<p>/** </p>\n<ul>\n<li>获取模版名 </li>\n<li></li>\n<li>@param string $template<br>*/<br>public function getTemplateName($template)<br>{<br> $default_ext_len = strlen($this-&gt;config[‘extension’]);<br> if(substr($template, -$default_ext_len) != $this-&gt;config[‘extension’]) {  <pre><code>$template .= $this-&gt;config[&apos;extension&apos;];  \n</code></pre> }<br> return $template;<br>}  </li>\n</ul>\n<p>/** </p>\n<ul>\n<li>字符串渲染 </li>\n<li></li>\n<li>@param string $string 需要渲染的字符串 </li>\n<li>@param array $data 变量数组 </li>\n<li>@param string $return true返回 false直接输出页面 </li>\n<li>@return string<br>*/<br>public function parse($string, $data = array(), $return = FALSE)<br>{<br> $string = $this-&gt;twig-&gt;loadTemplate ( $string );<br> $data = array_merge($this-&gt;data, $data);<br> if ($return === TRUE) {  <pre><code>return $string-&gt;render ( $data );  \n</code></pre> } else {  <pre><code>return $string-&gt;display ( $data );  \n</code></pre> }<br>}<br>}  </li>\n</ul>\n</li>\n<li><p>在CI框架创建配制文件，路径： ./application/config/twig.php 配制代码：<br> &lt;?php if ( ! defined(‘BASEPATH’)) exit(‘No direct script access allowed’);<br>// 默认扩展名<br>$config[‘extension’] = “.twig”;<br>// 默认模版路径<br>$config[‘template_dir’] = APPPATH . “views/“;<br>// 缓存目录<br>$config[‘cache_dir’] = APPPATH . “cache/twig/“;<br>// 是否开启调试模式<br>$config[‘debug’] = false;<br>// 自动刷新<br>$config[‘auto_reload’] = true;</p>\n</li>\n</ol>\n<ol>\n<li>设置自动加载 ./application/config/autoload.php 把扩展及配制自动加载<br><code>$autoload[&#39;libraries&#39;] = array(&#39;Twig&#39;);</code><br><code>$autoload[&#39;libraries&#39;] = array(&#39;Twig&#39;);</code></li>\n</ol>\n<h2 id=\"Twig模板的使用\"><a href=\"#Twig模板的使用\" class=\"headerlink\" title=\"##Twig模板的使用\"></a>##Twig模板的使用</h2><p>$loader = new Twig_Loader_Filesystem(‘application/path’);//模板路径</p>\n<p>$twig = new Twig_Environment($loader, array(</p>\n<p>‘cache’ =&gt; ‘/path/compilation_cache’,  //设置缓存，建议调试阶段关闭（缓存太//强大删不掉的那种）</p>\n<p>));</p>\n<p>$template = $twig-&gt;loadTemplate(‘test.twig’);  //载入模板名称</p>\n<p>$template-&gt;display($data);//变量数据传入模板展示</p>\n<p>开发文档：<a href=\"http://twig.sensiolabs.org/documentation\" target=\"_blank\" rel=\"external\">http://twig.sensiolabs.org/documentation</a></p>\n<p>相关链接：<a href=\"http://blog.csdn.net/swain_yj/article/details/51693906\" target=\"_blank\" rel=\"external\">Twig的安装与使用</a></p>\n","slug":"mould/twing20170511","updated":"2017-05-11T07:43:15.929Z","comments":true,"excerpt":"","categories":[],"tags":[{"name":"模板","slug":"模板","permalink":"http://yinkp.com/tags/模板/"}]},{"title":"最近听了一首歌","date":"2017-05-11T07:16:00.067Z","path":"2017/05/11/emotion/daily20170511/","text":"最近听了一首歌，歌词挺美的，歌声也有画面感。分享给大家。 思美人兮 歌词：思美人兮 路长漫漫不可及拭泪天涯无归期千言万语 只如梗在心底愁丝万缕一朝夕思美人兮 悠悠浮云为我寄奈何鸿飞不解意归鸟乘风远飞我折翼在原地只见思念划天际男儿志千古愁溢于胸怀中抛入一汪江水向东流笑非笑 忧且忧浊世谁人能懂拂袖独行不回首幽兰花异芬芳含风影自香问君可有识得她芳踪趁年华未散尽摘得芙蓉与共莫让憾事绕心中思美人兮 纵然九死无悔意我心惜古人不及江可竭山可移唯志节不离弃宁求上下无归期男儿志千古愁溢于胸怀中抛入一汪江水向东流笑非笑 忧且忧浊世谁人能懂拂袖独行不回首幽兰花异芬芳含风影自香问君可有识得她芳踪趁年华未散尽摘得芙蓉与共莫让憾事绕心中男儿志千古愁溢于胸怀中抛入一汪江水向东流笑非笑 忧且忧浊世谁人能懂拂袖独行不回首幽兰花异芬芳含风影自香问君可有识得她芳踪趁年华未散尽摘得芙蓉与共莫让憾事绕心中思美人兮漂泊南行无所依我欲随风同归去","raw":"---\nlayout: post\ntitle: \"最近听了一首歌\"\ndate: 2017-05-11 12：12\ncomments: true\ntags: \n\t- 心情\n---\n\n最近听了一首歌，歌词挺美的，歌声也有画面感。分享给大家。\n\n![](/assets/blogImg/smrx.png)\n[思美人兮][1]\n\n*歌词：*\n思美人兮 路长漫漫不可及\n拭泪天涯无归期\n千言万语 只如梗在心底\n愁丝万缕一朝夕\n思美人兮 悠悠浮云为我寄\n奈何鸿飞不解意\n归鸟乘风远飞\n我折翼在原地\n只见思念划天际\n男儿志千古愁\n溢于胸怀中\n抛入一汪江水向东流\n笑非笑 忧且忧\n浊世谁人能懂\n拂袖独行不回首\n幽兰花异芬芳\n含风影自香\n问君可有识得她芳踪\n趁年华未散尽\n摘得芙蓉与共\n莫让憾事绕心中\n思美人兮 纵然九死无悔意\n我心惜古人不及\n江可竭山可移\n唯志节不离弃\n宁求上下无归期\n男儿志千古愁\n溢于胸怀中\n抛入一汪江水向东流\n笑非笑 忧且忧\n浊世谁人能懂\n拂袖独行不回首\n幽兰花异芬芳\n含风影自香\n问君可有识得她芳踪\n趁年华未散尽\n摘得芙蓉与共\n莫让憾事绕心中\n男儿志千古愁\n溢于胸怀中\n抛入一汪江水向东流\n笑非笑 忧且忧\n浊世谁人能懂\n拂袖独行不回首\n幽兰花异芬芳\n含风影自香\n问君可有识得她芳踪\n趁年华未散尽\n摘得芙蓉与共\n莫让憾事绕心中\n思美人兮\n漂泊南行无所依\n我欲随风同归去\n\n\n  [1]: http://music.163.com/#/m/playlist?id=422891281&userid=304706205","content":"<p>最近听了一首歌，歌词挺美的，歌声也有画面感。分享给大家。</p>\n<p><img src=\"/assets/blogImg/smrx.png\" alt=\"\"><br><a href=\"http://music.163.com/#/m/playlist?id=422891281&amp;userid=304706205\" target=\"_blank\" rel=\"external\">思美人兮</a></p>\n<p><em>歌词：</em><br>思美人兮 路长漫漫不可及<br>拭泪天涯无归期<br>千言万语 只如梗在心底<br>愁丝万缕一朝夕<br>思美人兮 悠悠浮云为我寄<br>奈何鸿飞不解意<br>归鸟乘风远飞<br>我折翼在原地<br>只见思念划天际<br>男儿志千古愁<br>溢于胸怀中<br>抛入一汪江水向东流<br>笑非笑 忧且忧<br>浊世谁人能懂<br>拂袖独行不回首<br>幽兰花异芬芳<br>含风影自香<br>问君可有识得她芳踪<br>趁年华未散尽<br>摘得芙蓉与共<br>莫让憾事绕心中<br>思美人兮 纵然九死无悔意<br>我心惜古人不及<br>江可竭山可移<br>唯志节不离弃<br>宁求上下无归期<br>男儿志千古愁<br>溢于胸怀中<br>抛入一汪江水向东流<br>笑非笑 忧且忧<br>浊世谁人能懂<br>拂袖独行不回首<br>幽兰花异芬芳<br>含风影自香<br>问君可有识得她芳踪<br>趁年华未散尽<br>摘得芙蓉与共<br>莫让憾事绕心中<br>男儿志千古愁<br>溢于胸怀中<br>抛入一汪江水向东流<br>笑非笑 忧且忧<br>浊世谁人能懂<br>拂袖独行不回首<br>幽兰花异芬芳<br>含风影自香<br>问君可有识得她芳踪<br>趁年华未散尽<br>摘得芙蓉与共<br>莫让憾事绕心中<br>思美人兮<br>漂泊南行无所依<br>我欲随风同归去</p>\n","slug":"emotion/daily20170511","updated":"2017-05-11T07:17:07.138Z","comments":true,"excerpt":"","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://yinkp.com/tags/心情/"}]}]